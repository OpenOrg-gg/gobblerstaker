/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GooPointsInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EIP712_DOMAIN()": FunctionFragment;
    "EIP712_REVISION()": FunctionFragment;
    "MAX_SUPPLY()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "__ERC20Detailed_init(string,string,uint8)": FunctionFragment;
    "__UFragments_init(string,string,address)": FunctionFragment;
    "_gonBalances(address)": FunctionFragment;
    "_gonsPerFragment()": FunctionFragment;
    "_reserve()": FunctionFragment;
    "_totalGons()": FunctionFragment;
    "_totalSupply()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256,address)": FunctionFragment;
    "currentReserve()": FunctionFragment;
    "decimals()": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "gobblerUnion()": FunctionFragment;
    "gobblers()": FunctionFragment;
    "gooTogether()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "monetaryPolicy()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "rebase(uint256,uint256,uint256)": FunctionFragment;
    "reserveAddress()": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "scaledBalanceOf(address)": FunctionFragment;
    "scaledTotalSupply()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "EIP712_DOMAIN"
      | "EIP712_DOMAIN()"
      | "EIP712_REVISION"
      | "EIP712_REVISION()"
      | "MAX_SUPPLY"
      | "MAX_SUPPLY()"
      | "PERMIT_TYPEHASH"
      | "PERMIT_TYPEHASH()"
      | "__ERC20Detailed_init"
      | "__ERC20Detailed_init(string,string,uint8)"
      | "__UFragments_init"
      | "__UFragments_init(string,string,address)"
      | "_gonBalances"
      | "_gonBalances(address)"
      | "_gonsPerFragment"
      | "_gonsPerFragment()"
      | "_reserve"
      | "_reserve()"
      | "_totalGons"
      | "_totalGons()"
      | "_totalSupply"
      | "_totalSupply()"
      | "balanceOf"
      | "balanceOf(address)"
      | "burn"
      | "burn(uint256,address)"
      | "currentReserve"
      | "currentReserve()"
      | "decimals"
      | "decimals()"
      | "donate"
      | "donate(uint256)"
      | "gobblerUnion"
      | "gobblerUnion()"
      | "gobblers"
      | "gobblers()"
      | "gooTogether"
      | "gooTogether()"
      | "initialize"
      | "initialize(address,address)"
      | "mint"
      | "mint(uint256,address)"
      | "monetaryPolicy"
      | "monetaryPolicy()"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "rebase"
      | "rebase(uint256,uint256,uint256)"
      | "reserveAddress"
      | "reserveAddress()"
      | "reserveRatio"
      | "reserveRatio()"
      | "scaledBalanceOf"
      | "scaledBalanceOf(address)"
      | "scaledTotalSupply"
      | "scaledTotalSupply()"
      | "symbol"
      | "symbol()"
      | "totalSupply"
      | "totalSupply()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_REVISION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ERC20Detailed_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__ERC20Detailed_init(string,string,uint8)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__UFragments_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__UFragments_init(string,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_gonBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_gonBalances(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_gonsPerFragment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gonsPerFragment()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_reserve()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalGons",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalGons()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentReserve()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gobblerUnion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gobblerUnion()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gobblers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gobblers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gooTogether",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gooTogether()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "monetaryPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monetaryPolicy()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebase(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_REVISION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SUPPLY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ERC20Detailed_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ERC20Detailed_init(string,string,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__UFragments_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__UFragments_init(string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gonBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gonBalances(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gonsPerFragment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gonsPerFragment()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_reserve()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_totalGons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_totalGons()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReserve()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gobblerUnion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gobblerUnion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gobblers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gobblers()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gooTogether",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gooTogether()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monetaryPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monetaryPolicy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebase(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "Donation(address,uint256,uint256)": EventFragment;
    "LogMonetaryPolicyUpdated(address)": EventFragment;
    "LogRebase(uint256,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "feePaid(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn(address,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Donation(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMonetaryPolicyUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogMonetaryPolicyUpdated(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebase(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint(address,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "feePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "feePaid(address,uint256)"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  from: string;
  value: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface DonationEventObject {
  from: string;
  value: BigNumber;
  totalSupply: BigNumber;
}
export type DonationEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DonationEventObject
>;

export type DonationEventFilter = TypedEventFilter<DonationEvent>;

export interface LogMonetaryPolicyUpdatedEventObject {
  monetaryPolicy: string;
}
export type LogMonetaryPolicyUpdatedEvent = TypedEvent<
  [string],
  LogMonetaryPolicyUpdatedEventObject
>;

export type LogMonetaryPolicyUpdatedEventFilter =
  TypedEventFilter<LogMonetaryPolicyUpdatedEvent>;

export interface LogRebaseEventObject {
  epoch: BigNumber;
  totalSupply: BigNumber;
}
export type LogRebaseEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRebaseEventObject
>;

export type LogRebaseEventFilter = TypedEventFilter<LogRebaseEvent>;

export interface MintEventObject {
  to: string;
  value: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface feePaidEventObject {
  from: string;
  amount: BigNumber;
}
export type feePaidEvent = TypedEvent<[string, BigNumber], feePaidEventObject>;

export type feePaidEventFilter = TypedEventFilter<feePaidEvent>;

export interface GooPoints extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GooPointsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_DOMAIN()"(overrides?: CallOverrides): Promise<[string]>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_REVISION()"(overrides?: CallOverrides): Promise<[string]>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    __ERC20Detailed_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__ERC20Detailed_init(string,string,uint8)"(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __UFragments_init(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "__UFragments_init(string,string,address)"(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _gonBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_gonBalances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _gonsPerFragment(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_gonsPerFragment()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _reserve(overrides?: CallOverrides): Promise<[string]>;

    "_reserve()"(overrides?: CallOverrides): Promise<[string]>;

    _totalGons(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalGons()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentReserve()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    donate(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "donate(uint256)"(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gobblerUnion(overrides?: CallOverrides): Promise<[string]>;

    "gobblerUnion()"(overrides?: CallOverrides): Promise<[string]>;

    gobblers(overrides?: CallOverrides): Promise<[string]>;

    "gobblers()"(overrides?: CallOverrides): Promise<[string]>;

    gooTogether(overrides?: CallOverrides): Promise<[string]>;

    "gooTogether()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    monetaryPolicy(overrides?: CallOverrides): Promise<[string]>;

    "monetaryPolicy()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebase(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rebase(uint256,uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveAddress(overrides?: CallOverrides): Promise<[string]>;

    "reserveAddress()"(overrides?: CallOverrides): Promise<[string]>;

    reserveRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { e18_reserve_ratio: BigNumber }>;

    "reserveRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { e18_reserve_ratio: BigNumber }>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "scaledBalanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "scaledTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

  "EIP712_DOMAIN()"(overrides?: CallOverrides): Promise<string>;

  EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

  "EIP712_REVISION()"(overrides?: CallOverrides): Promise<string>;

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  __ERC20Detailed_init(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__ERC20Detailed_init(string,string,uint8)"(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __UFragments_init(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    _gooTogether: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "__UFragments_init(string,string,address)"(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    _gooTogether: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _gonBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_gonBalances(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _gonsPerFragment(overrides?: CallOverrides): Promise<BigNumber>;

  "_gonsPerFragment()"(overrides?: CallOverrides): Promise<BigNumber>;

  _reserve(overrides?: CallOverrides): Promise<string>;

  "_reserve()"(overrides?: CallOverrides): Promise<string>;

  _totalGons(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalGons()"(overrides?: CallOverrides): Promise<BigNumber>;

  _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    multiPoints: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256,address)"(
    multiPoints: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "currentReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  donate(
    goo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "donate(uint256)"(
    goo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gobblerUnion(overrides?: CallOverrides): Promise<string>;

  "gobblerUnion()"(overrides?: CallOverrides): Promise<string>;

  gobblers(overrides?: CallOverrides): Promise<string>;

  "gobblers()"(overrides?: CallOverrides): Promise<string>;

  gooTogether(overrides?: CallOverrides): Promise<string>;

  "gooTogether()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _proxyAddress: PromiseOrValue<string>,
    _gooTogether: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _proxyAddress: PromiseOrValue<string>,
    _gooTogether: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    multiPoints: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,address)"(
    multiPoints: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  monetaryPolicy(overrides?: CallOverrides): Promise<string>;

  "monetaryPolicy()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebase(
    epoch: PromiseOrValue<BigNumberish>,
    supplyAdd: PromiseOrValue<BigNumberish>,
    supplyRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rebase(uint256,uint256,uint256)"(
    epoch: PromiseOrValue<BigNumberish>,
    supplyAdd: PromiseOrValue<BigNumberish>,
    supplyRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveAddress(overrides?: CallOverrides): Promise<string>;

  "reserveAddress()"(overrides?: CallOverrides): Promise<string>;

  reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  scaledBalanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "scaledBalanceOf(address)"(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "scaledTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

    "EIP712_DOMAIN()"(overrides?: CallOverrides): Promise<string>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

    "EIP712_REVISION()"(overrides?: CallOverrides): Promise<string>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    __ERC20Detailed_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__ERC20Detailed_init(string,string,uint8)"(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    __UFragments_init(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "__UFragments_init(string,string,address)"(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _gonBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_gonBalances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _gonsPerFragment(overrides?: CallOverrides): Promise<BigNumber>;

    "_gonsPerFragment()"(overrides?: CallOverrides): Promise<BigNumber>;

    _reserve(overrides?: CallOverrides): Promise<string>;

    "_reserve()"(overrides?: CallOverrides): Promise<string>;

    _totalGons(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalGons()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    donate(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "donate(uint256)"(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gobblerUnion(overrides?: CallOverrides): Promise<string>;

    "gobblerUnion()"(overrides?: CallOverrides): Promise<string>;

    gobblers(overrides?: CallOverrides): Promise<string>;

    "gobblers()"(overrides?: CallOverrides): Promise<string>;

    gooTogether(overrides?: CallOverrides): Promise<string>;

    "gooTogether()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    monetaryPolicy(overrides?: CallOverrides): Promise<string>;

    "monetaryPolicy()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebase(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rebase(uint256,uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveAddress(overrides?: CallOverrides): Promise<string>;

    "reserveAddress()"(overrides?: CallOverrides): Promise<string>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scaledBalanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "scaledTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Burn(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      value?: null
    ): BurnEventFilter;
    Burn(from?: PromiseOrValue<string> | null, value?: null): BurnEventFilter;

    "Donation(address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      value?: null,
      totalSupply?: null
    ): DonationEventFilter;
    Donation(
      from?: PromiseOrValue<string> | null,
      value?: null,
      totalSupply?: null
    ): DonationEventFilter;

    "LogMonetaryPolicyUpdated(address)"(
      monetaryPolicy?: null
    ): LogMonetaryPolicyUpdatedEventFilter;
    LogMonetaryPolicyUpdated(
      monetaryPolicy?: null
    ): LogMonetaryPolicyUpdatedEventFilter;

    "LogRebase(uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      totalSupply?: null
    ): LogRebaseEventFilter;
    LogRebase(
      epoch?: PromiseOrValue<BigNumberish> | null,
      totalSupply?: null
    ): LogRebaseEventFilter;

    "Mint(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      value?: null
    ): MintEventFilter;
    Mint(to?: PromiseOrValue<string> | null, value?: null): MintEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "feePaid(address,uint256)"(from?: null, amount?: null): feePaidEventFilter;
    feePaid(from?: null, amount?: null): feePaidEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_DOMAIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    __ERC20Detailed_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__ERC20Detailed_init(string,string,uint8)"(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __UFragments_init(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "__UFragments_init(string,string,address)"(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _gonBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_gonBalances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _gonsPerFragment(overrides?: CallOverrides): Promise<BigNumber>;

    "_gonsPerFragment()"(overrides?: CallOverrides): Promise<BigNumber>;

    _reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "_reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalGons(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalGons()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burn(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "donate(uint256)"(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gobblerUnion(overrides?: CallOverrides): Promise<BigNumber>;

    "gobblerUnion()"(overrides?: CallOverrides): Promise<BigNumber>;

    gobblers(overrides?: CallOverrides): Promise<BigNumber>;

    "gobblers()"(overrides?: CallOverrides): Promise<BigNumber>;

    gooTogether(overrides?: CallOverrides): Promise<BigNumber>;

    "gooTogether()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    monetaryPolicy(overrides?: CallOverrides): Promise<BigNumber>;

    "monetaryPolicy()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebase(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rebase(uint256,uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scaledBalanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "scaledTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EIP712_DOMAIN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EIP712_REVISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ERC20Detailed_init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__ERC20Detailed_init(string,string,uint8)"(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      decimals_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __UFragments_init(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "__UFragments_init(string,string,address)"(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _gonBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_gonBalances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _gonsPerFragment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_gonsPerFragment()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_reserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalGons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalGons()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "donate(uint256)"(
      goo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gobblerUnion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gobblerUnion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gobblers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gobblers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gooTogether(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gooTogether()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _proxyAddress: PromiseOrValue<string>,
      _gooTogether: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      multiPoints: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    monetaryPolicy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "monetaryPolicy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebase(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rebase(uint256,uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      supplyAdd: PromiseOrValue<BigNumberish>,
      supplyRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "scaledBalanceOf(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "scaledTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
