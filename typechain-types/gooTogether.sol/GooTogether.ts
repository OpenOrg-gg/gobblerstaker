/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GooTogetherInterface extends utils.Interface {
  functions: {
    "_gooPoints()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getUserData(address,uint256)": FunctionFragment;
    "gooPoints()": FunctionFragment;
    "pay_interest()": FunctionFragment;
    "poolMulitple()": FunctionFragment;
    "totalGooInContract()": FunctionFragment;
    "userTotalGooEstimated(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_gooPoints"
      | "_gooPoints()"
      | "deposit"
      | "deposit(uint256)"
      | "getUserData"
      | "getUserData(address,uint256)"
      | "gooPoints"
      | "gooPoints()"
      | "pay_interest"
      | "pay_interest()"
      | "poolMulitple"
      | "poolMulitple()"
      | "totalGooInContract"
      | "totalGooInContract()"
      | "userTotalGooEstimated"
      | "userTotalGooEstimated(address)"
      | "withdraw"
      | "withdraw(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_gooPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gooPoints()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gooPoints", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gooPoints()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pay_interest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pay_interest()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolMulitple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolMulitple()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGooInContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGooInContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalGooEstimated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalGooEstimated(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_gooPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_gooPoints()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gooPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gooPoints()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pay_interest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pay_interest()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolMulitple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolMulitple()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGooInContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGooInContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalGooEstimated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalGooEstimated(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GooTogether extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GooTogetherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _gooPoints(overrides?: CallOverrides): Promise<[string]>;

    "_gooPoints()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getUserData(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gooPoints(overrides?: CallOverrides): Promise<[string]>;

    "gooPoints()"(overrides?: CallOverrides): Promise<[string]>;

    pay_interest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pay_interest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolMulitple(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolMulitple()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalGooInContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalGooInContract()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userTotalGooEstimated(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userTotalGooEstimated(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _gooPoints(overrides?: CallOverrides): Promise<string>;

  "_gooPoints()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserData(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getUserData(address,uint256)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gooPoints(overrides?: CallOverrides): Promise<string>;

  "gooPoints()"(overrides?: CallOverrides): Promise<string>;

  pay_interest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pay_interest()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolMulitple(overrides?: CallOverrides): Promise<BigNumber>;

  "poolMulitple()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalGooInContract(overrides?: CallOverrides): Promise<BigNumber>;

  "totalGooInContract()"(overrides?: CallOverrides): Promise<BigNumber>;

  userTotalGooEstimated(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userTotalGooEstimated(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _gooPoints(overrides?: CallOverrides): Promise<string>;

    "_gooPoints()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getUserData(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gooPoints(overrides?: CallOverrides): Promise<string>;

    "gooPoints()"(overrides?: CallOverrides): Promise<string>;

    pay_interest(overrides?: CallOverrides): Promise<BigNumber>;

    "pay_interest()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolMulitple(overrides?: CallOverrides): Promise<BigNumber>;

    "poolMulitple()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalGooInContract(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGooInContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    userTotalGooEstimated(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTotalGooEstimated(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _gooPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "_gooPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserData(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gooPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "gooPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    pay_interest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pay_interest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolMulitple(overrides?: CallOverrides): Promise<BigNumber>;

    "poolMulitple()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalGooInContract(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGooInContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    userTotalGooEstimated(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTotalGooEstimated(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _gooPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_gooPoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserData(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gooPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gooPoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay_interest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pay_interest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolMulitple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolMulitple()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGooInContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalGooInContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalGooEstimated(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userTotalGooEstimated(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
